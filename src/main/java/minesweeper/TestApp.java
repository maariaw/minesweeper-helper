/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package minesweeper;

import java.io.File;
import java.io.PrintStream;
import java.util.Random;
import java.util.Scanner;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.LinkedBlockingQueue;
import minesweeper.model.GameStats;
import minesweeper.model.Move;
import minesweeper.model.Board;
import minesweeper.generator.MinefieldGenerator;
import minesweeper.bot.Bot;
import minesweeper.bot.BotExecutor;
import minesweeper.bot.MyBot;

public class TestApp {

    public GameStats gameStats;
    public Board board;
    /* Place your bot here */
    public Bot bot = new MyBot();

    public TestApp(long seed, int width, int height, int mines) {
        board = new Board(new MinefieldGenerator(seed), width, height, mines);
        BlockingQueue<Move> moveQueue = new LinkedBlockingQueue<>();
        BotExecutor botExecutor = new BotExecutor(moveQueue, bot, board);
        this.gameStats = new GameStats();
        this.gameStats.startTime = System.nanoTime();
        botExecutor.run();
        while (!moveQueue.isEmpty()) {
            this.gameStats.update(moveQueue.poll());
        }
    }

    public static void main(String[] args) {
        Scanner input = new Scanner(System.in);
        System.out.println("Type the desired settings for the test:");
        System.out.println("Width (squares):");
        int width = Integer.valueOf(input.nextLine());
        System.out.println("Height (squares):");
        int height = Integer.valueOf(input.nextLine());
        System.out.println("Number of mines:");
        int mines = Integer.valueOf(input.nextLine());
        System.out.println("Name for settings:");
        String name = input.nextLine();
        System.out.println("Thank you! Testing will start now. Results can be found in test.txt in project root.");

        int n = 100;

        //Sets the out stream to file test.txt in root of project.
        try {
            System.setOut(new PrintStream(new File("test.txt")));
        } catch (Exception e) {

        }
        //Print the used parameters
        System.out.println("Settings: " + name + "\n");
        System.out.println("Board width: " + width);
        System.out.println("Board height: " + height);
        System.out.println("Number of mines: " + mines);
        System.out.println(n + " sets of 100 games");

        //Record rate of won games
        int[] winrates = new int[n];
        int sum = 0;

        //Play a 100 sets of 100 games
        for (int set = 1; set <= n; set++) {
            Random rng = new Random();
            //Play 100 games and save the winrate
            int wonGames = hundredGames(rng, width, height, mines);
            winrates[set - 1] = wonGames;
            sum += wonGames;
            System.out.println("\nSet " + set + " had a win rate of " + wonGames + "%\n");
        }

        //Calculate mean
        double mean = 1.0 * sum / n;
        //Calculate standard deviation
        double errorSum = 0;
        for (int i = 0; i < n; i++) {
            double distance = winrates[i] - mean;
            double error = distance * distance;
            errorSum += error;
        }
        double deviation = Math.sqrt(errorSum / (n - 1));

        //Print results
        System.out.println("Mean: " + mean);
        System.out.println("Standard deviation: " + deviation);
    }

    private static int hundredGames(Random random, int width, int height, int mines) {
        int wonGames = 0;
        TestApp app;
        for (int game = 0; game < 100; game++) {
            long seed = Math.abs(random.nextLong());
            app = new TestApp(seed, width, height, mines);
            if (app.board.gameWon) {
                wonGames++;
            }
        }
        return wonGames;
    }
}
